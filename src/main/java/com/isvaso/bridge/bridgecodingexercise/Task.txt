You are given an example of an inheritance hierarchy which results
in Cartesian-product duplication.

Please refactor this hierarchy, giving the base class Shape a constructor
hat takes an interface called Renderer  defined as

interface Renderer
{
  public String whatToRenderAs();
}
as well as VectorRenderer  and RasterRenderer  classes. Each implementer of the Shape
interface should have a constructor that takes an Renderer  such that, subsequently, each constructed
object's toString()  operates correctly and produces a message similar to the following:

new Triangle(new RasterRenderer()).toString() // returns "Drawing Triangle as pixels"

The method whatToRenderAs() should return "pixels" if using a raster renderer, and "lines" if using
a vector renderer.